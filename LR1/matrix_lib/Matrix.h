//
// Created by Глеб on 1.09.22.
//

#ifndef PPOIS_LABS_MATRIX_H
#define PPOIS_LABS_MATRIX_H

#include <fstream>
#include <iostream>

/**
 * \brief Матрица
 *
 * Класс, реализует тип данных "Вещественная матрица". Класс реализует следующие
 * возможности:
 * 1. изменение числа строк и числа столбцов;
 * 2. загрузка матрицы из файла;
 * 3. извлечение подматрицы заданного размера;
 * 4. проверка типа матрицы (квадратная, диагональная, нулевая, единичная,
 * симметрическая, верхняя треугольная, нижняя треугольная);
 * 5. транспонированние матрицы;
 * @tparam T - тип данных для хранения в матрице шаблонных значений.
 */

class Matrix {
 public:
  /**
   * Конструктор без параметров,
   * инициализирует размеры матрицы нулями.
   * \arg \c rows = 0;
   * \arg \c columns = 0;
   */
  Matrix();

  /**
   * Инициализирует матрицу переданными значениями строк и колонок.
   * @param rows - количество строк
   * @param columns - количество столбцов
   */
  Matrix(int rows, int columns);

  /**
   * Конструктор копирования. Он вызывается когда новый объект создаётся на
   * основе существующего.
   * @param other - копируемая матрица
   */
  Matrix(const Matrix& other);

  /**
   * В деструкторе высвобождается динамическая память.
   */
  ~Matrix();

  /**
   * Выводит матрицу в консоль.
   */
  void print();

  /**
   * Выводит тип матрицы.
   */
  void printMatrixType();

  /**
   * Возвращает значение из i строки j столбца матрицы, если такового нет,
   * возвращает 0.
   * @param i - строка матрицы (i>0)
   * @param j - столбец матрицы (j>0)
   * @return T - значение ячейки матрицы или 0
   */
  double getValue(int i, int j);

  /**
   * Устанавливает переданное значение в i строке j столбце матрицы.
   * @param i - строка матрицы (i>0)
   * @param j - столбец матрицы (j>0)
   * @param value - значение
   */
  void setValue(int i, int j, double value);

  /**
   * Возвращает количество строк матрицы.
   * @return int
   */
  int getRows();

  /**
   * Возвращает количество столбцов матрицы.
   * @return int
   */
  int getColumns();

  /**
   * Изменяет количество строк на переданное значение,
   * матрица или обрезается, или пустые ячейки заполняются нулями.
   * @param changed_rows - новое значение количества строк матрицы.
   */
  void changeRows(int changed_rows);

  /**
   * Изменяет количество столбцов на переданное значение,
   * матрица или обрезается, или пустые ячейки заполняются нулями.
   * @param changed_columns - новое значение количества столбцов матрицы.
   */
  void changeColumns(int changed_columns);

  /**
   * Транспонирует матрицу.
   * @return Matrix<T> - новая транспонированная матрица.
   */
  Matrix getTransMatrix();

  /**
   * Возвращает под матрицу заданного размера начиная с x1 строки y1 столбца, по
   * x2 строки y2 столбца.
   * @param x1 - начальная строка
   * @param y1 - начальный столбец
   * @param x2 - конечная строка
   * @param y2 - конечный столбец
   * @return Matrix<T> - сабматрица основной матрицы.
   */
  Matrix getSubMatrix(int x1, int y1, int x2, int y2);

  /**
   * Является ли эта матрица квадратной.
   * @return true - если является, в противном случае false
   */
  bool isSquareMatrix();

  /**
   * Является ли эта матрица диагональной.
   * @return true - если является, в противном случае false
   */
  bool isDiagonalMatrix();

  /**
   * Является ли эта матрица нулевой.
   * @return true - если является, в противном случае false
   */
  bool isZeroMatrix();

  /**
   * Является ли эта матрица единичной.
   * @return true - если является, в противном случае false
   */
  bool isUnitMatrix();

  /**
   * Является ли эта матрица симметричной.
   * @return true - если является, в противном случае false
   */
  bool isSymmetricalMatrix();

  /**
   * Является ли эта матрица верхней треугольной.
   * @return true - если является, в противном случае false
   */
  bool isUpperTriangularMatrix();

  /**
   * Является ли эта матрица нижней треугольной.
   * @return true - если является, в противном случае false
   */
  bool isLowerTriangularMatrix();

  /**
   * Загружает матрицу из файла.
   * @param fileName - имя файла или путь к файлу
   */
  void loadFromFile(std::string fileName);

  /**
   * @brief
   * wdfwdffwwdfkdlfj jwdjf jsadjf jadsj fj
   * @param other
   * @return Matrix<T>&
   */
  Matrix& operator=(Matrix other) noexcept;

  /**
   * Увеличивает количество строк и столбцов матрицы
   * @return Matrix<T> - матрица с изменённым размером.
   */
  Matrix& operator++();

  /**
   * Уменьшает количество строк и столбцов матрицы на 1
   * @return Matrix<T> - матрица с изменённым размером.
   */
  Matrix& operator--();

 private:
  double** M;
  int rows;
  int columns;
};

#endif  // PPOIS_LABS_MATRIX_H
