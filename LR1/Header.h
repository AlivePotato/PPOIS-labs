#pragma once

using namespace std;

/// \file
/// \brief Файл Header с обьявлением классов, переменных, функций, конструкторов, диструкторов, перегрузок операторов.

/*!
	\brief Класс, реализующий матрицу.
	\authors Miroshnichenko Kostya
	\version 1.0
	\date 9/16/2022
*/
class Matrix
{
private:
	/// \brief Переменна принимающая размер матрицы по оси X.
	int size_x;

	/// \brief Переменна принимающая размер матрицы по оси Y.
	int size_y;

	/// \brief Выделение динамической памяти для двумерного массива.
	int** Content;
	
	/// \brief Переменна, принимающая значение true или false, в зависимости от того, возвращает ли функция данную матрицу или нет.
	bool ReturnExistTemp;

	/// \brief Переменная, принимающая значения true или false, в зависимости от того, имеет ли объект класса заполненную матрицу или нет.
	bool MatrixExist;

public:
	/// \brief Конструктор, в котором размер матрицы по стандарту [0]x[0].
	Matrix();

	/// \brief Конструктор, который создает матрицу в зависимости от размеров, которые ввел пользователь через консоль.
	/// \param Передаются переменные, определяющие размер матрицы по осям X и Y.
	Matrix(int, int);

	/// \brief Диструктор, для удаления динамического памяти двумерного массива.
	~Matrix();

	/// \brief Функция, которая создает матрицу (двумерный массив с выделением динамической памяти).
	void DynamicArray();

	/// \brief Функция, которая вычисляет 3 нормы матрицы.
	void NormOfMatrix();

	/// \brief Функция, которая вычисляет детерминант матрицы.
	double DeterminantOfMatrix();

	/// \brief Перегрузка операторы вывода, для вывода всех элементов матрицы.
	/// \param Передается ссылка на матрицу.
	friend ostream& operator<< (ostream&, Matrix&);

	/// \brief Перегрузка операторы ввода, для ввода элементов матрицы.
	/// \param Передается ссылка на матрицу.
	friend istream& operator>> (istream&, Matrix&);

	/// \brief Перегрузка оператора сложения, для получения суммы двух матриц.
	/// \param Передается ссылка на матрицу.
	Matrix operator+ (Matrix&);

	/// \brief Перегрузка оператора разности, для получения разности двух матриц.
	/// \param Передается ссылка на матрицу.
	Matrix operator- (Matrix&);

	/// \brief Перегрузка оператора произведение, для получения произведения двух матриц.
	/// \param Передается ссылка на матрицу.
	Matrix operator* (Matrix&);

	/// \brief Перегрузка оператора произведение, для получения произведения матрицы c числом.
	/// \param Передается переменная, которая ялвяется числом для произведения с матрицей.
	Matrix operator* (int);

	/// \brief Перегрузка оператора деления, для получения деления матрицы на числом.
	/// \param Передается переменная, которая ялвяется числом для деления с матрицей.
	Matrix operator/ (int);

	/// \brief Перегрузка оператора степени, для получения матрицы в опредленной степени.
	/// \param Передается переменная, которая ялвяется степенью матрицы.
	Matrix operator^ (int);

	/// \brief Перегрузка оператора присвоения, для того, чтоб одной матрице присвоить другую.
	/// \param Передается ссылка на константную матрицу.
	Matrix& operator= (const Matrix&);

	/// \brief Перегрузка оператора инкримента, для увеличения матрицы.
	Matrix& operator++ ();

	/// \brief Перегрузка оператора дискримента, для уменьшения матрицы.
	Matrix& operator-- ();
};


/*!
	\brief Класс для вызова консольного меню и выбора действий над матрицей.
	\authors Miroshnichenko Kostya
	\version 1.0
	\date 9/16/2022
*/ 
class Solution
{
private:
	/// \brief Переменная принимающая номер операции над матрицей.
	int way;

	/// \brief Функция для управления основным меню программы.
	int Get_1();

	/// \brief Функция для управления дочерним меню программы.
	int Get_2();

public:
	/// \brief Функция для вызова консольного меню.
	void Menu();
};